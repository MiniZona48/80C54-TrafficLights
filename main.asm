;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Sat Oct 8 2022
; Processor: 80C54
; Compiler:  ASEM-51 (Proteus)
; Filename: main.asm
; Date: 2022/11/05
; File Version: 17
; Author: 
; Company: SUAI
; Description: Светофор
;====================================================================

$NOMOD51
$INCLUDE (8051.MCU)

;====================================================================
; VARIABLES
;====================================================================

; Для кнопок
power_mode equ 18h ; питание (0 - выкл, 1 -вкл)
power_mode_defense equ 19h ; защита от зажатия кнопки питания
mode equ 1Ah ; режим работы светофора (0 - стандартный режим, 1 - ожидающий режим)
mode_defense equ 1Bh ; защита от зажатой кнопки смены режима
active_color equ 1Ch ; активный цвет для настройки (1 - зеленый, 0 - красный)
active_color_defense equ 1Dh ; защита от зажатия кнопки смена активного цвета для настройки
up_time_defense equ 1Eh ; защита от зажатия кнопки увеличения времени
down_time_defense equ 1Fh ; защита от зажатия кнопки уменьшения времени
start_mode_2 equ 3Eh ; пешеход нажал на кнопку для перехода в 2 режиме работы светофора
second_mode_defense equ 3Fh ; защита от зажатия кнопки пешехода

; Для светофора
direction equ 08h ; направление работы светофора
green_time equ 40h ; время действия зеленого цвета
yellow_time equ 41h ; время действия желтого цвета
red_time equ 42h ; время действия красного цвета
active_color_work equ 57h ; текущий цвет на автомобильном светофоре
status_speaker equ 3Dh ; разрешение на создание звукового сигнала
;----

map_start equ 30h ;начало области хранения КС клавиатуры

; Для ЖКИ
switch equ 43h ;переключатель «команда-данные» (RS)
bte equ 44h ;выдаваемый на ЖКИ байт
symbol_e_s_red equ 50h ; символ единиц у времени красного цвета
symbol_d_s_red equ 51h ; символ десятка у времени красного цвета
symbol_e_s_green equ 52h ; символ единиц у времени зеленого цвета
symbol_d_s_green equ 53h ; символ десятка у времени зеленого цвета
symbol_power_mode equ 54h ; символ режима питания
symbol_mode equ 55h ; символ режима работы светофора
symbol_active_color equ 56h ; символ активного цвета для настройки

; Для таймера
hmks equ 45h ;сотни мкс
ms equ 46h ;единицы мс
dms equ 47h ;десятки мс
hms equ 48h ;сотни мс
s equ 49h ; единицы с


;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================

      ; Reset Vector
      org   0000h ; processor reset vector
      jmp   Start ; go to beginning of program
      
      ; Interrupt Vectors
      org 0003h ; processor interrupt vector
      ajmp int_0 ; go to int0 interrupt service routine
      
      org 0013h ; processor interrupt vector
      ajmp int_1 ; go to int1 interrupt service routine
      
      org 000bh ; processor interrupt vector
      ajmp tim_0 ; go to timer 0 interrupt service routine
      
;====================================================================
; CODE SEGMENT
;====================================================================

      org   0100h
Start:	
      ; подготовка
      clr power_mode ; сначала светофоры выключены
      clr power_mode_defense ; защита от зажатия кнопки 1
      clr active_color ; сначала включена настройка красного цвета
      clr active_color_defense ; защита от зажатия кнопки 2
      clr mode ; сначала включен классический режим
      
      ; подготовка светофора 
      setb direction ; направления светофора для машин. Начиная с красного
      mov green_time, #30 ; начальное время зеленного у машин
      mov yellow_time, #3 ; начальное время желтого у машин
      mov red_time, #10 ; начальное время красного у машин
      mov active_color_work, #0 ; начальный цвет после запуска в классическом режиме
      clr status_speaker ; разрешение на звуковой сигнал
      
      clr P2.4 ; !!!!!! желтый сигнал у пешехода не используется !!!!
      
      ; подготовка дисплея
      lcall indic ;вывод фиксированных частей двух строк
      mov switch, #0
      
      ; инициализация таймера
      mov TMOD, #00000010b ;таймер 0 в режиме 2 без разрешения int0
      mov TH0, #156 ; считаем сотни мкс
      mov TL0, #156
      mov hmks, #0 ; обнуляем таймер
      mov ms, #0
      mov dms, #0
      mov hms, #0
      mov s, #0
      setb ET0 ; разрешение прерываний от таймера
      mov TCON, #00000101b
      clr TR0 ; запрет на прерывание от таймера 0
      clr EX0 ; заапрет внешнего прерывания 0
      setb EX1 ; разрешение внешнего прерывания 1
      setb EA ; включаем прерывания
      
      ; подготовка символов для ЖКИ
      mov symbol_active_color, #30h ; символ 0 для активного цвета настройки
      mov symbol_mode, #30h ; символ 0 для режима работы светофора
      mov symbol_power_mode, #30h ; символ 0 для режима питания светофора
      mov symbol_e_s_red, #30h ; символ 0 для единиц времени действия красного цвета
      mov symbol_d_s_red, #31h ; символ 1 для десятков времени действия красного цвета
      mov symbol_e_s_green, #30h ; символ 0 для единиц времени действия зеленого цвета
      mov symbol_d_s_green, #33h ; символ 3 для десятков времени действия зеленого цвета
      
loop:
opros:      
      clr P2.0 
      mov R0, #map_start ;адрес начала карты состояние
      setb p0.1 ;настройка разрядов порта P0 на чтение
      setb p0.0
      mov b, p0 ;чтение
      anl b, #00001111b ;выделение значащих разрядов (у нас 4
			;младших разряда, поэтому умножаем на
			;00001111)
      mov @r0, b ;записываем строку карты
     
      ; снимаем защиту от зажатия кнопки смены режима работы
      mov c, P3.3 ;
      jc first_button
      clr mode_defense
      
      ;проверка кнопок
; первая кнопка (переключение режима питания) 
first_button:
      mov b, map_start 
      anl b, #1
      mov R0, b
      cjne R0, #1, power_mode_set ; Если была нажата кнопка вкл/выкл (кнопка 1)
      clr power_mode_defense ; отключаем защиту от зажатия
      jmp second_button
           
power_mode_set:
      jb power_mode_defense, second_button
      cpl power_mode ; переключаем режим вкл/выкл
      cpl TR0 ; переключаем таймер
      setb power_mode_defense ; включаем защита от зажатия
      jnb power_mode, change_symbol_power_mode ; обновляем данные на дисплее
      inc symbol_power_mode
      jmp update_power_mode
change_symbol_power_mode:
      dec symbol_power_mode
update_power_mode:      
      lcall update_display
      
; вторая кнопка (переключение цвета настройки)
second_button:
      jb power_mode, before_stop; если светофор включен, то настраивать нельзя
      mov b, map_start 
      anl b, #10b
      mov R0, b
      cjne R0, #10b, active_color_set ; Если была нажата кнопка смены цвета настройки (кнопка 2)
      clr active_color_defense ; Отключаем защиту от зажатия
      jmp third_button
 
active_color_set:
      jb active_color_defense, third_button
      cpl active_color ; переключаем цвет настройки
      setb active_color_defense ; включаем защиту от зажатия
      jnb active_color, change_symbol_active_color ; обновляем данные на дисплее
      inc symbol_active_color
      jmp update_active_color
change_symbol_active_color:
      dec symbol_active_color
update_active_color:      
      lcall update_display
      jmp third_button
      
before_stop: ; для возможности большого скачка через анализ всех кнопок (большое растояние до stop)
      jmp stop

; Третья кнопка (уменьшение времени действия выбранного цвета)
third_button:
      mov b, map_start 
      anl b, #100b
      mov R0, b
      cjne R0, #100b, down_time_set ; Если была нажата кнопка уменьшения действия цвета (кнопка 3)
      clr down_time_defense ; Отключаем защиту от зажатия
      jmp fourth_button
      
down_time_set:
      jb down_time_defense, fourth_button
      mov c, active_color
      jc down_time_for_green ; если стоит зеленый цвет
      mov R0, red_time
      cjne R0, #10, dec_red_time ; если не минимум красного, то уменьшаем время
      jmp exit_down_time_set ; иначе не уменьшаем
dec_red_time:
      dec red_time
      mov R0, symbol_e_s_red ; обновление ЖКИ
      cjne R0, #30h, dec_symbol_e_s_red
      dec symbol_d_s_red
      mov symbol_e_s_red, #39h 
      lcall update_display
      jmp exit_down_time_set 
dec_symbol_e_s_red:
     dec symbol_e_s_red
     lcall update_display     
     jmp exit_down_time_set     
down_time_for_green:      
      mov R0, green_time
      cjne R0, #30, dec_green_time ; если не минимум зеленного,то уменьшаем время
      jmp exit_down_time_set ; иначе не уменьшаем
dec_green_time:
     dec green_time
     mov R0, symbol_e_s_green ; обновление ЖКИ
     cjne R0, #30h, dec_symbol_e_s_green
     dec symbol_d_s_green
     mov symbol_e_s_green, #39h 
     lcall update_display
     jmp exit_down_time_set 
dec_symbol_e_s_green:
     dec symbol_e_s_green
     lcall update_display     
exit_down_time_set:      
      setb down_time_defense ;включаем защиту от зажатия
      
; четвертая кнопка (увеличение времени действия выбранного цвета)     
fourth_button:
      mov b, map_start 
      anl b, #1000b
      mov R0, b
      cjne R0, #1000b, up_time_set ; Если была нажата кнопка смена цвета настройки (кнопка 2)
      clr up_time_defense ; отключаем защиту от зажатия
      jmp stop
      
up_time_set:
      jb up_time_defense, stop
      mov c, active_color
      jc up_time_for_green ; если стоит зеленый цвет
      mov R0, red_time
      cjne R0, #30, inc_red_time ; если не максимум красного, то уменьшаем время
      jmp exit_up_time_set ; иначе не увеличиваем
inc_red_time:
      inc red_time
      mov R0, symbol_e_s_red ; обновляем ЖКИ
      cjne R0, #39h, inc_symbol_e_s_red
      inc symbol_d_s_red
      mov symbol_e_s_red, #30h 
      lcall update_display
      jmp exit_up_time_set 
inc_symbol_e_s_red:
      inc symbol_e_s_red
      lcall update_display     
      jmp exit_up_time_set     
up_time_for_green:      
      mov R0, green_time
      cjne R0, #90, inc_green_time ; если не максимум зеленного,то уменьшаем время
      jmp exit_up_time_set ; иначе не увеличиваем
inc_green_time:
      inc green_time
      mov R0, symbol_e_s_green ; обновляем жки
      cjne R0, #39h, inc_symbol_e_s_green
      inc symbol_d_s_green
      mov symbol_e_s_green, #30h 
      lcall update_display
      jmp exit_up_time_set 
inc_symbol_e_s_green:
      inc symbol_e_s_green
      lcall update_display     
exit_up_time_set:      
      setb up_time_defense ; включаем защиту от зажатия
      
; режим выкл      
stop: jb power_mode, run

      ; выключаем индикаторы светофора
      clr P2.1 ; 
      clr P2.2 ;
      clr P2.3 ;  
      clr P2.4 ; 
      
      ; обнуляем таймер
      mov hmks, #0
      mov ms, #0
      mov dms, #0
      mov hms, #0
      mov s, #0
      
      clr P3.4 ; выключаем динамик
      
      clr TR0 ; таймер выключен
      
      jmp loop ; зацикливание работы
; Режим вкл      
run:

      lcall work_traffic_lights ; работа светофоров
	
      jmp Loop ; зацикливание работы


;====================================================================
; подпрограммы
;====================================================================      
; ЖКИ
indic: 
      mov switch, #0;переключатель уст-ть на команду (RS=0)
      mov bte, #38h ; установка восьмибитного режима обмена с ЖКИ
      lcall indic_wr ;вызов подпрограммы передачи в ЖКИ
      mov bte, #0ch ;активация всех знакомест
      lcall indic_wr
      mov bte, #06h ;режим автом. перемещения курсора
      lcall indic_wr
      mov bte, #80h ;установка адреса первого символа( первая строка первая ячейка)
      lcall indic_wr
      ;вывод строк
      mov switch, #1 ;переключатель – данные (RS=1)
      mov dptr, #0fd0h ;адрес, по которому расположены данные
      ;(см. конец программы)
      
indic_data_wr1: ;вывод символов первой строки
      clr a
      movc a, @a+dptr
      
ind_row1: mov bte, a ;передаваемый байт – код символа
      lcall indic_wr
      inc dptr
      mov a, dpl ;младший байт указателя данных
      cjne a, #0E0h, indic_data_wr1
      ;пока не введены 16 символа 1ой строки
      
      mov switch, #0 ;RS=0 – команда
      mov bte, #0C0h ;установка адреса символа(Вторая строка первая ячейка)
      lcall indic_wr
      mov switch, #1 ;RS=1 - данные
      
indic_data_wr2: ;вывод символов второй строки
      clr a
      movc a, @a+dptr
      
ind_row2: 
      mov bte, a
      lcall indic_wr
      inc dptr
      mov a, dpl
      cjne a, #0F0h, indic_data_wr2
      ;E0h+10h=F0h – адр. конца вывода 
      ret ;Возвращение в основную программу


;подрограмма для обновления информации на экране
update_display:
      ; вывод времени действия красного цвета
      mov switch, #0;переключатель уст-ть на команду (RS=0)
      mov bte, #82h ;установка адреса первого символа( первая строка третья ячейка)
      lcall indic_wr
      mov switch, #1 ;переключатель – данные (RS=1)
      mov bte, symbol_d_s_red ;передаваемый байт – код символа
      lcall indic_wr
      mov bte, symbol_e_s_red ;передаваемый байт – код символа
      lcall indic_wr
      ; вывод времени действия зеленого цвета
      mov switch, #0;переключатель уст-ть на команду (RS=0)
      mov bte, #8Dh ;установка адреса первого символа( первая строка 14-я ячейка)
      lcall indic_wr
      mov switch, #1 ;переключатель – данные (RS=1)
      mov bte, symbol_d_s_green ;передаваемый байт – код символа
      lcall indic_wr
      mov bte, symbol_e_s_green ;передаваемый байт – код символа
      lcall indic_wr
      ; вывод выбранного цвета настройки
      mov switch, #0;переключатель уст-ть на команду (RS=0)
      mov bte, #0C4h ;установка адреса символа(Вторая строка пятая ячейка)
      lcall indic_wr
      mov switch, #1 ;переключатель – данные (RS=1)
      mov bte, symbol_active_color ;передаваемый байт – код символа
      lcall indic_wr
      ; вывод режима работы
      mov switch, #0;переключатель уст-ть на команду (RS=0)
      mov bte, #0C8h ;установка адреса символа(Вторая строка 9-я ячейка)
      lcall indic_wr
      mov switch, #1 ;переключатель – данные (RS=1)
      mov bte, symbol_mode ;передаваемый байт – код символа
      lcall indic_wr
      ; вывод режима работы
      mov switch, #0;переключатель уст-ть на команду (RS=0)
      mov bte, #0CDh ;установка адреса символа(Вторая строка 14-я ячейка)
      lcall indic_wr
      mov switch, #1 ;переключатель – данные (RS=1)
      mov bte, symbol_power_mode ;передаваемый байт – код символа
      lcall indic_wr
      ret      
      
      
;подпрограмма передачи в ЖКИ
indic_wr: 
      mov P1, bte ;передаваемый байт – в Р1
      setb P3.7 ;E:=1
      clr P3.6 ;RW:=0 (запись)
      mov b, switch
      mov c, b.0 ;нам нужен 0-ой бит B
      mov P3.5, c ;RS:=switch (команда/данные)
      lcall indic_delay ;вызов подпрограммы задержки
      clr P3.7 ;E:=0
      lcall indic_delay
      setb P3.7 ;E:=1
      ret 
      
      
;подпрограмма задержки       
indic_delay: 
      nop
      nop
      nop
      nop
      nop
      nop
      nop
      nop
      ret    

      
; подпрограмма работы светофора    
work_traffic_lights:
      jnb mode, work_skip_to_red ;если установлен станлартный режим работы
      jnb start_mode_2, work_skip_to_green ; если пешеход не нажал кнопку в ожидающем режиме
work_skip_to_red:  
      mov R0, active_color_work
      cjne R0, #0, work_skip_to_yellow ; если сейчас активный не красный
      ; активация красного цвета у автомобильного светофора(зеленого у пешеходного)
      setb P2.1
      clr P2.2
      clr P2.3
      jb status_speaker, work_end ; если включено разрешение на динамик
      lcall active_speaker ; то включаем его
      jmp work_end
      
work_skip_to_yellow:
      mov R0, active_color_work
      cjne R0, #1, work_skip_to_green ; если сейчас не желтый
      ; активация желтого цвета у автомобильного светофора(красного у пешеходного)
      clr P2.1
      clr P2.2
      setb P2.3
      jmp work_end
      
work_skip_to_green:
      ; активация зеленого цвета у автомобильного светофора(красного у пешеходного)
      clr P2.1
      setb P2.2
      clr P2.3
work_end: ret
        

; звуковой эффект
active_speaker:
      setb P3.4
      nop
      clr P3.4   
      setb status_speaker ; запрещаем активацию динамика
      ret
	
	
; Прерывание от таймера 0 
tim_0: ; 
      inc hmks ;десятые доли мс
      mov a,hmks
      cjne a,#10,exit ;не прошла 1 мс  
      mov hmks,#0
      inc ms ;единицы мс
      mov a,ms
      cjne a, #5, time_skip ; если не прошло 5 мс
      clr status_speaker ; если прошло 5 мс, то разрешаем активацию динамика
time_skip:      
      cjne a,#10,exit ;не прошло 10 мс
      mov ms,#0
      inc dms ;десятки мс
      mov a,dms
      cjne a,#10,exit ;не прошло 100 мс
      mov dms,#0
      inc hms ;сотни мс
      mov a,hms     
      cjne a,#10,exit ;не прошла 1 с
      mov hms,#0
      inc s ; c
      
      ; счет для красного цвета
      mov a, active_color_work ;
      cjne a, #0, skip_to_yellow ; если сейчас красный цвет
      mov a,s
      cjne a, red_time,exit ; не прошло время действия красного
      mov s, #0
      mov active_color_work, #1 ; след. цвет - желтый
      jmp exit
      
      ; счет для желтого сигнала
skip_to_yellow:
      mov a, active_color_work
      cjne a, #1, skip_to_green ; если сейчас желтый сигнал
      mov a, s
      cjne a, yellow_time, exit ; не прошло время действия желтого
      mov s, #0
      jnb direction, back_direction ; если направление в сторону зеленного
      mov active_color_work, #2 ; след. цвет - зеленный
      clr direction ; переключаем направление до красного
      jnb start_mode_2, exit ; если пешеход нажал кнопку в режиме ожидания
      setb EX0 ; включаем внешнее прерывание 0
      setb EX1 ; включаем внешнее прерываний 1
      clr TR0 ; отключаем таймер
      clr start_mode_2 ; активация сигналов в режиме ожидания завершена
      jmp exit
back_direction:
      mov active_color_work, #0 ; след. цвет - красный
      setb direction ; переключаем направление до красного
      jmp exit
      
      ; расчет для зеленного
skip_to_green:
      mov a,s
      cjne a, green_time,exit ; не прошло время действия зеленного
      mov s, #0
      mov active_color_work, #1 ; след. цвет - желтый
      jmp exit
      
exit: reti
      
      
; внешнее прерывание 0 (запуск смены сигналов в режиме ожидания)
int_0:
      jnb power_mode, exit_int_0 ; если светофор не включен, то кнопка не работает
      jb second_mode_defense, exit_int_0 ; если зажата кнопка
      ; очищаем таймер
      mov hmks, #0
      mov ms, #0
      mov dms, #0
      mov hms, #0
      mov s, #0
      setb TR0 ; включаем таймер
      clr EX0 ; отключаем внешнее прерывание 0
      clr EX1 ; отключаем внешнее прерывание 1
      setb start_mode_2 ; активация сигналов в режиме ожидания включена
exit_int_0:      
      reti
   
; внешнее прерывание 1  (смена режима работы)
int_1:
      ; добавить запрет при отключенном состоянии
      jb mode_defense, exit_int_1
      cpl TR0 ; переключаем разрешения на таймер
      cpl EX0 ; переключаем разрешение на внешнее прерывание 0
      cpl mode ; переключаем режим работы
      ; обнуляем таймер
      mov hmks, #0
      mov ms, #0
      mov dms, #0
      mov hms, #0
      mov s, #0
      clr direction ; ставим обратное направление работы светофора
      mov active_color_work, #2 ; активный цвет для автомобилей - зеленый
      setb mode_defense ; устанавливаем защиту от зажатия
      jnb mode, change_symbol_mode ; обновляем данные на дисплее
      inc symbol_mode
      jmp update_mode
change_symbol_mode:
      dec symbol_mode
update_mode:      
      lcall update_display
exit_int_1:
      reti
;====================================================================

      ;данные располагаем в памяти программ
      org 0FD0h
    ;  data: 
      db 'R=10s Y=3s G=30s' ; время действия сигналов 
      db '  C=0 M=0 Pw=0  ' ; Активный цвет, Режим работы, Питание
      ;директива db помещает коды
      ;символов в последовательные ячейки памяти программ

;=====================================================================
END